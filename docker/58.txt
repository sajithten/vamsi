https://kublr.com/blog/advanced-jenkins-groovy-scripting-for-live-fetching-of-docker-images/

https://hub.docker.com/v2/repositories/sajithten/springboot/tags/?page_size=20

activechoice plugin
------------------

- This project is parameterized, active active choice parameter
- name= selectDockerimage


// Import the JsonSlurper class to parse Dockerhub API response
import groovy.json.JsonSlurper
// Set the URL we want to read from, it is MySQL from official Library for this example, limited to 20 results only.
docker_image_tags_url = "https://hub.docker.com/v2/repositories/library/mysql/tags/?page_size=20"
try {
    // Set requirements for the HTTP GET request, you can add Content-Type headers and so on...
    def http_client = new URL(docker_image_tags_url).openConnection() as HttpURLConnection
    http_client.setRequestMethod('GET')
    // Run the HTTP request
    http_client.connect()
    // Prepare a variable where we save parsed JSON as a HashMap, it's good for our use case, as we just need the 'name' of each tag.
    def dockerhub_response = [:]    
    // Check if we got HTTP 200, otherwise exit
    if (http_client.responseCode == 200) {
        dockerhub_response = new JsonSlurper().parseText(http_client.inputStream.getText('UTF-8'))
    } else {
        println("HTTP response error")
        System.exit(0)
    }
    // Prepare a List to collect the tag names into
    def image_tag_list = []
    // Iterate the HashMap of all Tags and grab only their "names" into our List
    dockerhub_response.results.each { tag_metadata ->
        image_tag_list.add(tag_metadata.name)    
    }
    // The returned value MUST be a Groovy type of List or a related type (inherited from List)
    // It is necessary for the Active Choice plugin to display results in a combo-box
    return image_tag_list.sort()
} catch (Exception e) {
         // handle exceptions like timeout, connection errors, etc.
         println(e)
}

--------------------------------------------------------------------------

- pipeline{
        agent any
        stages{
            stage('get user selected image tag'){
               steps{
                     echo "${params.selectDockerimage}"
                     }
                   }
                }
           }
-----------------------------------------------------------------------------

---
- name: run nginx container
  docker_container:
    name: myapplication
    image: sajithten/springboot:{{selectdockerimage}}
    state: started
    ports: 
       -"33333:33333"
    restart: yes

ansible-playbook run-docker.yaml --extra-vars 'selectdockerimage=2'

to stop
------

docker stop myapplication && docker rm myapplication

ansible -m docker_container -a 'name=myapplication state=stopped' localhost

ansible -m docker_container -a 'name=myapplication state=absent' localhost

stage('run docker container'){
               steps{
                     sh """ sudo ansible-playbook /root/run-docker.yaml --extra-vars '{"selectdockerimage":${params.selectDockerimage}"}' """
                     }
                   }

---------------------------------
---
- hosts: localhost
  tasks:
    - name: stop running container
      docker_container:
         name: myapplication
         state: stopped
     - name: remove running container
      docker_container:
         name: myapplication
         state: absent
     - name: run nginx container
  docker_container:
    name: myapplication
    image: sajithten/springboot:{{selectdockerimage}}
    state: started
    ports: 
       -"33333:33333"
    restart: yes


- name: run nginx container
  docker_container:
    name: myapplication
    image: sajithten/springboot:{{selectdockerimage}}
    state: started
    ports: 
       -"33333:33333"
    restart: yes



